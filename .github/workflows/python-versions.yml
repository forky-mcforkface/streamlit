name: Test Python Versions

on: [push]

jobs:
  build:
    defaults:
      run:
        shell: bash --login --verbose -eu -o pipefail {0}

    runs-on: ubuntu-latest

    env:
      SUDO: 'sudo'

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7.12", "3.10.0"]
    
    steps:
      - name: Checkout Streamlit code
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update Submodules
        uses: ./.github/actions/update_submodules
      - name: Run pre-cache
        uses: ./.github/actions/pre_cache
      - name: Run pre-make
        uses: ./.github/actions/pre_make
      - name: Run make init
        uses: ./.github/actions/make_init
      - name: Run make develop
        run: |
          make develop
      - name: Register Mapbox Token
        run: |
          if [ ! -d $HOME/.streamlit ] ; then
              mkdir $HOME/.streamlit
          fi
          MAPBOX_TOKEN=$(curl -sS https://data.streamlit.io/tokens.json | jq -r '.["mapbox-localhost"]') \
          && echo '[mapbox]' >  ~/.streamlit/config.toml \
          && echo 'token = "'$MAPBOX_TOKEN'"' >> ~/.streamlit/config.toml
      - name: Register Streamlit User
        run: |
          echo '[general]' >  ~/.streamlit/credentials.toml
          echo 'email = "test@streamlit.io"' >> ~/.streamlit/credentials.toml
      - name: Run Linters
        run: |
          # TODO: ADD ABILITY TO ACTUALLY SEE WHAT THE LINT PROBLEM IS
          source $HOME/.bash_profile
          # Run eslint as a standalone command to generate the test report.
          PRE_COMMIT_NO_CONCURRENCY=true DISABLE=eslint pipenv run pre-commit run --show-diff-on-failure --color=always --all-files
          make jslint
      - name: Store Lint Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint_results
          path: frontend/test-reports
      - name: Run Type Checkers
        run: |
          source $HOME/.bash_profile
          make tstypecheck
          scripts/mypy --report
      - name: Store Type Check Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: type_check_results
          path: lib/test-reports
      - name: Run Python Tests
        run: |
          source $HOME/.bash_profile
          if [ ${{ matrix.python-version }} == 3.7.12 ]; then
            ${SUDO} apt-get install python3-pydot python3-pydot-ng graphviz
          fi
          make pycoverage
      - name: Store Python Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python_test_results
          path: lib/test-reports
      - name: Run Integration Tests
        run: |
          source $HOME/.bash_profile
          make integration-tests
      - name: CLI Smoke Tests
        run: |
          source $HOME/.bash_profile
          make cli-smoke-tests
